AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for setting up an EC2 instance for the web tier, running an NGINX server on an Ubuntu AMI with necessary configurations.
  Follows 6 pillars of well architected framework along with their best practices.
  Mandatory: The stack name should be web. This is crucial as other stacks are importing values from this stack and will not work properly if the stack name is different.

Parameters:
  NamingPrefix:
    Type: String
    Default: term-end-web
    Description: Prefix for naming AWS resources

  KeyName:
    Type: String
    Default: term-end
    Description: Key name for EC2

  LabRole:
    Description: Existing IAM role name
    Type: String
    Default: LabRole

  RoleArn:
    Description: Existing IAM role ARN
    Type: String
    Default: arn:aws:iam::114580182108:role/LabRole

  AMI:
    Description: AMI ID
    Type: String
    Default: ami-04b70fa74e45c3917

  Repository:
    Description: Repository to clone
    Type: String
    Default: -b bhishman/no-ref/changes https://github.com/bhishman-desai/waiting_coder.git

Resources:

  # Profile
  WebProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref LabRole

  # EC2 Instance
  WebTierInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref AMI
      KeyName: !Ref KeyName
      SubnetId: !ImportValue core-infrastructure-PublicSubnet1Id
      SecurityGroupIds:
        - !ImportValue core-infrastructure-PublicInstanceSGId
      IamInstanceProfile: !Ref WebProfile
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-web-tier-instance'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo -s
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          
          # Update packages
          apt-get update -y

          # Install NGINX
          apt-get install -y nginx

          # Install Node.js and npm
          curl -sL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs

          # Clone the repository
          git clone ${Repository}
          cd waiting_coder

          # Install frontend dependencies and build
          npm install
          npm run build

          # Configure NGINX
          cd /etc/nginx
          sudo rm nginx.conf
          cp /waiting_coder/nginx.conf .

          # Restart NGINX
          sudo useradd -s /sbin/nologin nginx
          sudo systemctl restart nginx
          sudo systemctl status nginx

          # Ensure NGINX has permission to access our files
          sudo chmod -R 755 /home/ubuntu

  # Custom Resource to capture the AMI ID from the Wrapper Lambda Function
  CreateAmiCustomResource:
    Type: Custom::CreateAmi
    Properties:
      ServiceToken: !ImportValue app-WrappingLambdaFunctionArn
      ServiceTimeout: 300
      LambdaFunctionName: !ImportValue app-CreateAmiFunctionName
      InstanceId: !Ref WebTierInstance
      ImageName: !Sub '${NamingPrefix}-web-tier-image'

  # Create a Launch Template from the AMI
  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${NamingPrefix}-web-tier-launch-template'
      LaunchTemplateData:
        ImageId: !GetAtt CreateAmiCustomResource.ImageId
        InstanceType: t3.micro
        SecurityGroupIds:
          - !ImportValue core-infrastructure-PublicInstanceSGId
        IamInstanceProfile:
          Name: !Ref WebProfile

Outputs:
  InstanceId:
    Description: The Instance ID of the web tier
    Value: !Ref WebTierInstance
    Export:
      Name: !Sub '${AWS::StackName}-WebTierInstanceId'

  PublicDnsName:
    Description: The public DNS name of the web tier instance
    Value: !GetAtt WebTierInstance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-WebTierPublicDnsName'

  LaunchTemplateId:
    Description: The Launch Template ID of the web tier
    Value: !Ref WebLaunchTemplate
    Export:
      Name: !Sub '${AWS::StackName}-WebLaunchTemplateId'

  LaunchTemplateVersion:
    Description: The version of the Launch Template
    Value: !GetAtt WebLaunchTemplate.LatestVersionNumber
    Export:
      Name: !Sub '${AWS::StackName}-WebLaunchTemplateVersion'
