AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for setting up an EC2 instance for the app tier, running an Ubuntu AMI with necessary configurations.
  Follows 6 pillars of well architected framework along with their best practices.
  Mandatory: The stack name should be app. This is crucial as other stacks are importing values from this stack and will not work properly if the stack name is different.

Parameters:
  NamingPrefix:
    Type: String
    Default: term-end-app
    Description: Prefix for naming AWS resources

  KeyName:
    Type: String
    Default: term-end
    Description: Key name for EC2

  LabRole:
    Description: Existing IAM role name
    Type: String
    Default: LabRole

  RoleArn:
    Description: Existing IAM role ARN
    Type: String
    Default: arn:aws:iam::114580182108:role/LabRole

  AMI:
    Description: AMI ID
    Type: String
    Default: ami-04b70fa74e45c3917

  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
      - t3.medium

  UserData:
    Description: User data script for EC2 instance
    Type: String
    Default: |
      #!/bin/bash 
      exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

      echo "Updating packages..."
      apt-get update -y

      echo "Installing MySQL server..."
      apt-get install mysql-server -y

      echo "Installing jq..."
      apt-get install jq -y

      echo "Installing AWS CLI..."
      snap install aws-cli --classic

      echo "Fetching database credentials from AWS Secrets Manager..."
      export DB_SECRET=$(aws secretsmanager get-secret-value --secret-id db-credentials --query 'SecretString' --output text)
      export DB_HOST=$(echo $DB_SECRET | jq -r '.host')
      export DB_USER=$(echo $DB_SECRET | jq -r '.username')
      export DB_PASSWORD=$(echo $DB_SECRET | jq -r '.password')

      echo "Creating the database using MySQL CLI..."
      mysql -u $DB_USER -p$DB_PASSWORD -h $DB_HOST -e "create database waiting_coder;"

      echo "Installing NVM (Node Version Manager)..."
      curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 

      echo "Installing Node.js..."
      nvm install 20
      nvm use 20

      echo "Installing PM2 (Daemon Process Manager)..."
      npm install -g pm2

      echo "Installing AWS SDK for JavaScript..."
      npm install -g @aws-sdk/client-secrets-manager

      echo "Cloning the backend repository..."
      git clone -b bhishman/no-ref/changes https://github.com/bhishman-desai/waiting_coder.git
      cd waiting_coder
      
      echo "Populating database with tables and data..."
      mysql -u $DB_USER -p$DB_PASSWORD -h $DB_HOST -e "use waiting_coder; source waiting_coder.sql;"

      echo "Installing backend dependencies..."
      cd backend
      npm install

      echo "Starting the Node.js application using PM2..."
      pm2 start npm --name "waiting_coder" -- run dev

      echo "Ensuring PM2 starts on reboot and saves the current list of processes..."
      pm2 startup
      pm2 save

      echo "export DB_SECRET='$DB_SECRET'" >> ~/.bashrc
      echo "export DB_HOST='$DB_HOST'" >> ~/.bashrc
      echo "export DB_USER='$DB_USER'" >> ~/.bashrc
      echo "export DB_PASSWORD='$DB_PASSWORD'" >> ~/.bashrc

Resources:
  # Profile
  AppProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref LabRole

  # EC2 Instance
  AppTierInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMI
      KeyName: !Ref KeyName
      SubnetId: !ImportValue core-infrastructure-PrivateAppSubnet1Id
      SecurityGroupIds:
        - !ImportValue core-infrastructure-PrivateInstanceSGId
      IamInstanceProfile: !Ref AppProfile
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-app-tier-instance'
      UserData:
        Fn::Base64: !Ref UserData

Outputs:
  InstanceId:
    Description: The Instance ID of the app tier
    Value: !Ref AppTierInstance
    Export:
      Name: !Sub '${AWS::StackName}-AppTierInstanceId'

  AppProfile:
    Description: The App Profile
    Value: !Ref AppProfile
    Export:
      Name: !Sub '${AWS::StackName}-AppProfile'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "App Tier Configuration"
        Parameters:
          - LabRole
          - RoleArn
          - AMI
          - InstanceType
          - UserData
          - KeyName
          - NamingPrefix
    ParameterLabels:
      NamingPrefix:
        default: "Naming Prefix for Resources"
      KeyName:
        default: "EC2 Key Pair Name"
      LabRole:
        default: "Existing IAM Role Name"
      RoleArn:
        default: "Existing IAM Role ARN"
      AMI:
        default: "AMI ID"
      InstanceType:
        default: "EC2 Instance Type"
      UserData:
        default: "User Data Script for EC2 Instance"
