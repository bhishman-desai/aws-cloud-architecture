AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for setting up internal load balancing and auto scaling for the app tier.
  Follows 6 pillars of well architected framework along with their best practices.

Parameters:
  NamingPrefix:
    Type: String
    Default: term-end-app
    Description: Prefix for naming AWS resources

  RoleArn:
    Description: Existing IAM role ARN
    Type: String
    Default: arn:aws:iam::114580182108:role/LabRole

  S3Bucket:
    Type: String
    Description: S3 bucket name for the wrapping lambda function
    Default: term-end

  InstanceType:
    Type: String
    Description: EC2 instance type
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Default: t3.micro

  TargetGroupPort:
    Type: Number
    Description: Port for target group and health check
    Default: 4000

  TargetGroupHealthCheckPort:
    Type: String
    Description: Target group health check port
    Default: traffic-port

  ListenerPort:
    Type: Number
    Description: Port for the load balancer listener
    Default: 80

  MinSize:
    Type: Number
    Description: Minimum size of the auto-scaling group
    Default: 2

  MaxSize:
    Type: Number
    Description: Maximum size of the auto-scaling group
    Default: 3

  DesiredCapacity:
    Type: Number
    Description: Desired capacity of the auto-scaling group
    Default: 2

Resources:
  # Lambda Function to create AMI
  CreateAmiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !Ref RoleArn
      Runtime: nodejs16.x
      Timeout: 300
      VpcConfig:
        SubnetIds:
          - !ImportValue core-infrastructure-PrivateAppSubnet1Id
        SecurityGroupIds:
          - !ImportValue core-infrastructure-PrivateInstanceSGId
      Environment:
        Variables:
          DESCRIPTION: 'App tier AMI with Node.js application and MySQL configurations'
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ec2 = new AWS.EC2();

          exports.handler = async function(event, context) {
              console.log("Event: ", JSON.stringify(event, null, 2));
              const instanceId = event.ResourceProperties.InstanceId || event.detail['instance-id'];
              const imageName = event.ResourceProperties.ImageName || event.detail['instance-id'] || process.env.IMAGE_NAME;
              const description = process.env.DESCRIPTION;

              if (!instanceId) {
                  const errorMessage = "Instance ID is undefined in the event.";
                  console.error(errorMessage);
                  return {
                      StatusCode: 500,
                      Body: {Error: errorMessage}
                  };
              }

              console.log("Creating AMI for Instance ID: ", instanceId);
              const params = {
                  InstanceId: instanceId,
                  Name: imageName,
                  Description: description,
                  NoReboot: true
              };
              try {
                  const result = await ec2.createImage(params).promise();
                  console.log("AMI created: ", result.ImageId);
                  return {
                      StatusCode: 200,
                      Body: { ImageId: result.ImageId }
                  };
              } catch (error) {
                  console.error("Error creating AMI: ", error);
                  return {
                      StatusCode: 500,
                      Body: {Error: error.message}
                  };
              }
          };

  # Wrapper Lambda Function
  WrappingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !Ref RoleArn
      Runtime: nodejs16.x
      Timeout: 300
      VpcConfig:
        SubnetIds:
          - !ImportValue core-infrastructure-PrivateAppSubnet1Id
        SecurityGroupIds:
          - !ImportValue core-infrastructure-PrivateInstanceSGId
      Environment:
        Variables:
          AMI_LAMBDA_ARN: !GetAtt CreateAmiFunction.Arn
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: wrapping-lambda.zip

  # Custom Resource to capture the AMI ID from the Wrapper Lambda Function
  CreateAmiCustomResource:
    Type: Custom::CreateAmi
    Properties:
      ServiceToken: !GetAtt WrappingLambdaFunction.Arn
      ServiceTimeout: 300
      LambdaFunctionName: !Ref CreateAmiFunction
      InstanceId: !ImportValue app-AppTierInstanceId
      ImageName: !Sub 'app-tier-image'

  # Create a Launch Template from the AMI
  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'app-tier-launch-template'
      LaunchTemplateData:
        ImageId: !GetAtt CreateAmiCustomResource.ImageId
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !ImportValue core-infrastructure-PrivateInstanceSGId
        IamInstanceProfile:
          Name: !ImportValue app-AppProfile

  # Target Group
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${NamingPrefix}-target-group'
      Protocol: HTTP
      Port: !Ref TargetGroupPort
      VpcId: !ImportValue core-infrastructure-VPCId
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: !Ref TargetGroupHealthCheckPort
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200

  # Load Balancer
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${NamingPrefix}-internal-alb'
      Scheme: internal
      Subnets:
        - !ImportValue core-infrastructure-PrivateAppSubnet1Id
        - !ImportValue core-infrastructure-PrivateAppSubnet2Id
      SecurityGroups:
        - !ImportValue core-infrastructure-InternalLoadBalancerSG
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  # Listener
  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: !Ref ListenerPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  # Auto Scaling Group
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${NamingPrefix}-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !ImportValue core-infrastructure-PrivateAppSubnet1Id
        - !ImportValue core-infrastructure-PrivateAppSubnet2Id
      TargetGroupARNs:
        - !Ref AppTargetGroup
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-app-instance'
          PropagateAtLaunch: true

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the internal load balancer
    Value: !GetAtt AppLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNSName'

  TargetGroupArn:
    Description: ARN of the target group
    Value: !Ref AppTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-TargetGroupArn'

  AutoScalingGroupName:
    Description: Name of the Auto Scaling group
    Value: !Ref AppAutoScalingGroup
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingGroupName'

  WrappingLambdaFunctionArn:
    Description: The ARN of the Wrapping Lambda Function
    Value: !GetAtt WrappingLambdaFunction.Arn
    Export:
      Name: !Sub 'app-WrappingLambdaFunctionArn'

  CreateAmiFunctionName:
    Description: The name of the Create AMI Lambda Function
    Value: !Ref CreateAmiFunction
    Export:
      Name: !Sub 'app-CreateAmiFunctionName'

  AppLaunchTemplateId:
    Description: The Launch Template ID of the app tier
    Value: !Ref AppLaunchTemplate
    Export:
      Name: !Sub 'app-AppLaunchTemplateId'

  AppLaunchTemplateVersion:
    Description: The version of the Launch Template
    Value: !GetAtt AppLaunchTemplate.LatestVersionNumber
    Export:
      Name: !Sub 'app-AppLaunchTemplateVersion'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "App Tier Load Balancer and Auto Scaling Configuration"
        Parameters:
          - NamingPrefix
          - RoleArn
          - S3Bucket
          - InstanceType
          - TargetGroupPort
          - ListenerPort
          - MinSize
          - MaxSize
          - DesiredCapacity
    ParameterLabels:
      NamingPrefix:
        default: "Naming Prefix"
      RoleArn:
        default: "IAM Role ARN"
      S3Bucket:
        default: "S3 Bucket for Wrapping Lambda Function"
      InstanceType:
        default: "EC2 Instance Type"
      TargetGroupPort:
        default: "Target Group Port"
      ListenerPort:
        default: "Load Balancer Listener Port"
      MinSize:
        default: "Auto Scaling Group Minimum Size"
      MaxSize:
        default: "Auto Scaling Group Maximum Size"
      DesiredCapacity:
        default: "Auto Scaling Group Desired Capacity"

